config { 
    type: "table",
    schema: constants.DATAFORM_LV3,
    description: "PRS table for GA user data.",
    tags: ["daily-update", "gold"],
    bigquery: {
        partitionBy: "date",
        labels: {environment: "gold"}
    },
    columns:{
        date: "Start date of the session.",
        table_suffix: "Date suffix. Used primarily to manage updates in partitions.",
        user_id: "User pseudo ID straight from raw GA4 data.", 
    }
}

WITH tbl1 AS (
  SELECT
    *,
    LAST_VALUE(cohort.cohort) OVER (PARTITION BY user_pseudo_id, date 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS daily_cohort,

    LAST_VALUE(cohort.previous_cohort) OVER (PARTITION BY user_pseudo_id, date 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS previous_daily_cohort,

    LAST_VALUE(channel.channel) OVER (PARTITION BY user_pseudo_id, date 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS daily_channel,

    LAST_VALUE(cohort.cohort_duration_days) OVER (PARTITION BY user_pseudo_id, date 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cohort_duration_days,

    FIRST_VALUE(order_window.first_channel_order_window) OVER (PARTITION BY user_pseudo_id, order_window.lag_order_window 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS first_channel_order_window,

    LAST_VALUE(order_window.last_channel_order_window) OVER (PARTITION BY user_pseudo_id, order_window.lag_order_window 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_channel_order_window,

    LAST_VALUE(order_window.purchase_channel_path) OVER (PARTITION BY user_pseudo_id, order_window.lag_order_window 
      ORDER BY session.session_timestamp 
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS purchase_channel_path

  FROM ${ref("tbl_users")}
),

tbl2 AS (
SELECT
  *,
  CASE 
  WHEN MAX(date) OVER (PARTITION BY user_pseudo_id) < DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) AND purchase.repeat_purchaser IS FALSE AND purchase.purchaser IS TRUE THEN 4
  WHEN MAX(date) OVER (PARTITION BY user_pseudo_id) < DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) AND purchase.repeat_purchaser IS TRUE THEN 8
  ELSE cohort.last_daily_cohort END AS latest_cohort_daily,
  cohort.last_daily_cohort,
FROM tbl1  
),
 
 tbl3 AS (
SELECT
date,
user_pseudo_id,
daily_cohort,
previous_daily_cohort,
MAX(cohort_duration_days) AS cohort_duration_days,
LAST_VALUE(MAX(latest_cohort_daily)) OVER (PARTITION BY user_pseudo_id ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS latest_cohort_daily,
 --latest_cohort_daily,
purchase.repeat_purchaser,
COUNT(DISTINCT session.session_id) AS sessions,
--daily_channel,
channel.first_daily_channel AS first_seen_channel,
channel.last_daily_channel AS last_seen_channel,
MAX(first_channel_order_window) AS first_channel_order_window,
MAX(last_channel_order_window) AS last_channel_order_window,
MAX(purchase_channel_path) AS purchase_channel_path,
MAX(orders.order_count) AS total_order_count,
MAX(order_window.order_window_days) AS order_window_days,
SUM(metrics.bounced_sessions) AS bounced_session,
SUM(metrics.pageviews) AS pageviews,
SUM(metrics.landing_pageviews) AS landing_pageviews,
SUM(metrics.signups) AS signups,
SUM(metrics.logins) AS logins,
SUM(metrics.first_visits) AS first_visits,
SUM(metrics.deal_searches) AS deal_searches,
SUM(orders.profit) AS profit,
SUM(orders.revenue) AS revenue,
MAX(order_window.sessions_in_order_window) AS sessions_in_order_window,
FROM tbl2
GROUP BY ALL
 )

 SELECT 
 * EXCEPT(first_channel_order_window, last_channel_order_window, purchase_channel_path, order_window_days),
    CASE WHEN total_order_count = 0 THEN NULL ELSE first_channel_order_window END AS first_channel_order_window,
    CASE WHEN total_order_count = 0 THEN NULL ELSE last_channel_order_window END AS last_channel_order_window,
    CASE WHEN total_order_count = 0 THEN NULL ELSE purchase_channel_path END AS purchase_channel_path,
    CASE WHEN total_order_count = 0 THEN NULL ELSE order_window_days END AS order_window_days,
  FROM tbl3
