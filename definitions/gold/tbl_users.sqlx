config { 
    type: "table",
    schema: constants.DATAFORM_LV3,
    description: "PRS table for GA user data.",
    tags: ["daily-update", "gold"],
    bigquery: {
        partitionBy: "date",
         clusterBy: ["primary_user_id", "brand"],
        labels: {environment: "gold"}
    },
    columns:{
        date: "Start date of the session.",
        brand: "Brand. On The Beach, Sunshine and On The Beach IE.",
        primary_user_id: "Best User ID from Bloomreach and GA4.", 
        user_ids: "All known user IDs and Order Codes.", 
        session: "Session level data, including session IDs",
        channel: "Top in day session channels",
        order_attribution: "Order data and return dates",
        order_window: "Order window data including channel paths and metrics.",
        cohort: "Daily and intraday cohort data.",
        customer: "Customer info. Engagement flags over the last 30, 90 and 365 days.",
        session_metrics: "Session metrics including pageviews and bounces.",
    }
}

js {var{get_cohort_name} = require("includes/cohorts_udf");}

WITH
replace_cohorts_with_names AS (
SELECT
    * EXCEPT(cohort, previous_cohort, last_daily_cohort, first_daily_cohort, last_daily_cohort_prev_day, top_daily_cohort),
     ${get_cohort_name("cohort")} AS cohort,
     ${get_cohort_name("previous_cohort")} AS previous_cohort,
     ${get_cohort_name("last_daily_cohort")} AS last_daily_cohort,
     ${get_cohort_name("first_daily_cohort")} AS first_daily_cohort,
     ${get_cohort_name("last_daily_cohort_prev_day")} AS last_daily_cohort_prev_day,
     ${get_cohort_name("top_daily_cohort")} AS top_daily_cohort,
FROM ${ref("stg_cohorts")}  
),

join_multi_touch_attribution_date AS (
SELECT 
    a.*,
    b.order_date,
    b.redistributed_orders_ushaped,
    b.redistributed_orders_pageviews,
    b.redistributed_orders_linear,
    b.redistributed_orders_combo,
    b.redistributed_revenue_ushaped,
    b.redistributed_revenue_pageviews,
    b.redistributed_revenue_linear,
    b.redistributed_revenue_combo,
    b.day_number_in_order_window,
    b.day_before_order 
FROM replace_cohorts_with_names AS a
LEFT JOIN ${ref("stg_attribution")} AS b
    ON a.session_id = b.session_id
),

join_mwi_data AS (
SELECT 
    a.*,
    b.mwi_buying_stage_label,
    b.mwi_momentum_label,
FROM join_multi_touch_attribution_date AS a
LEFT JOIN ${ref("stg_mwi_sessions")} AS b
    ON a.session_id = b.device_session_id
),

-- arrange columns and shit like that
arrange_columns AS (
  SELECT 
  date,
  'On The Beach' AS brand,
  best_id AS primary_user_id,
  CASE
    WHEN best_id = bloomreach_id THEN 'bloomreach_id'
    WHEN best_id = user_id THEN 'user_id'
    WHEN best_id = user_pseudo_id THEN 'device_id'
  END AS primary_user_id_source,
  STRUCT(
      user_id AS user_id,
      user_pseudo_id AS device_id,
      bloomreach_id AS bloomreach_id,
      order_codes AS order_codes
    ) AS user_ids,
  STRUCT(
      session_id,
      channel AS channel,
      source AS source,
      medium AS medium,
      campaign AS campaign,
      campaign_type AS campaign_type,
      tracked_platform AS tracked_platform,
      session_timestamp AS timestamp,
      website_version,
      engaged_flag AS engaged_session_flag
    ) AS session,
  STRUCT( 
      bounced_session AS bounced_sessions,
      pageviews,
      landing_pageviews,
      create_account_events AS signups,
      login_events AS logins,
      first_visit_events AS first_visits,
      deal_search_events AS deal_searches
    ) AS session_metrics,
  STRUCT(
      cohort,
      cohort_change_window,
      CASE 
        WHEN first_visit_events = 1 THEN '0. Unknown'
        WHEN previous_cohort IS NULL THEN cohort
      ELSE previous_cohort END AS previous_cohort,
      first_daily_cohort,
      last_daily_cohort,
      last_daily_cohort_prev_day,
      top_daily_cohort,
      cohort_duration_days,
      cohort_shift,
      mwi_buying_stage_label AS mwi_buying_stage_label,
      mwi_momentum_label AS mwi_momentum_label
    ) AS cohort,
  STRUCT(
      first_daily_channel,
      last_daily_channel,
      CASE WHEN previous_last_daily_channel IS NULL THEN 'Unknown' ELSE previous_last_daily_channel END AS last_daily_channel_prev_day,
      top_daily_channel_push AS top_daily_channel_pusher,
      top_daily_channel_retreat AS top_daily_channel_retreater
    ) AS channel,
  STRUCT(
      purchaser,
      repeat_purchaser,
      repeat_purchaser_mi,
      total_order_count,
      returned_home_5d_plus AS returned_home_5days_plus,
      purchased_last_30d AS purchased_last_30days,
      purchased_last_90d AS purchased_last_90days,
      purchased_last_12m AS purchased_last_365days,
      has_engaged_session_last_30_days AS engaged_session_30days,
      has_engaged_session_last_90_days AS engaged_session_90days,
      has_engaged_session_last_365_days AS engaged_session_365days,
      has_engaged_crm_last_30_days AS engaged_crm_30days,
      has_engaged_crm_last_90_days AS engaged_crm_90days, 
      has_engaged_crm_last_365_days AS engaged_crm_365days,
      return_dates,
      departure_dates,
      destination_country,
      destination_region,
      passenger_group,
      pax,
      hotel,
      hotel_board_type,
      holiday_type
    ) AS customer,
  STRUCT(
        order_count,
        redistributed_orders_ushaped AS order_count_ushaped,
        redistributed_orders_pageviews AS order_count_pageview,
        redistributed_orders_linear AS order_count_linear,
        redistributed_orders_combo AS order_count_hybrid,
        revenue,
        redistributed_revenue_ushaped AS revenue_ushaped,
        redistributed_revenue_pageviews AS revenue_pageview,
        redistributed_revenue_linear AS revenue_linear,
        redistributed_revenue_combo AS revenue_hybrid
    ) AS order_attribution,
   STRUCT(  
    order_date, 
    rolling_order_window AS order_window,
    first_order_window AS lag_order_window,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE first_channel_order_window END AS first_channel,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE last_channel_order_window_nondirect END AS last_nondirect_channel,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE order_channel_path END AS purchase_channel_path,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE order_channel_path_full END AS purchase_channel_path_full,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE session_count END AS max_sessions,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE orders_window_days END AS max_days,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE day_number_in_order_window END AS day_number_in_order_window,
    CASE WHEN first_order_window = total_order_count THEN NULL ELSE day_before_order END AS day_before_order
    ) AS order_window,
FROM join_mwi_data
)

-- final query
SELECT * FROM arrange_columns