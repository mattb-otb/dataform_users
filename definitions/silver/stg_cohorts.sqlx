config { 
    type: "table",
    schema: constants.DATAFORM_LV2,
    description: "Stage table for GA user data.",
    tags: ["daily-update", "silver"],
    bigquery: {
        partitionBy: "date",
        clusterBy: ["best_id"],
        labels: {environment: "silver"}
    },
    columns:{
        date: "Start date of the session.",
        table_suffix: "Date suffix. Used primarily to manage updates in partitions.",
        best_id: "User pseudo ID straight from raw GA4 data.", 
    }
}

-- Extracting Orders
WITH base AS (
SELECT * FROM  ${ref("src_ids_channels")}
),

-- flag for purchase days, so new and repeat customer are always flagged across every session that day
purchase_daily_flag AS (
SELECT
  date,
  best_id,
  TRUE AS daily_purchase_flag,
FROM base  
WHERE order_count > 0
GROUP by date, best_id, daily_purchase_flag
),

-- add a flag that coverss the whole purchase day, this ensures a user doesn't change to repeat customer if they make multiple orders in the day
join_daily_purchase_flag AS (
SELECT
  a.*,
  CAST(COALESCE(b.daily_purchase_flag,FALSE) AS BOOL) AS daily_purchase_flag
FROM base AS a
  LEFT JOIN purchase_daily_flag AS b
    ON a.best_id = b.best_id
      AND a.date = b.date
),

-- Add rolling order count
add_rolling_orders AS (
SELECT
  *,
  SUM(order_count) OVER (PARTITION BY best_id ORDER BY session_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS rolling_order_count
FROM join_daily_purchase_flag
),

-- ensure mi repeat purchase flag persists
mi_repeat_paint AS (
SELECT
  * EXCEPT(repeat_purchaser_mi),
  MAX(CAST(repeat_purchaser_mi AS INT64)) OVER (PARTITION BY best_id, first_order_window) = 1 AS repeat_purchaser_mi,
  -- add a flag to tag sessions that are more than 90 days after the last session, to get a 'dormant' previous cohort
  CASE 
    WHEN LAG(session_timestamp) OVER (PARTITION BY best_id ORDER BY session_timestamp) IS NULL THEN TRUE
    WHEN TIMESTAMP_DIFF(session_timestamp, LAG(session_timestamp) OVER (PARTITION BY best_id ORDER BY session_timestamp), DAY) > 90 THEN TRUE 
  ELSE FALSE END AS dormant_user_flag
FROM add_rolling_orders
),

-- flag the whole day as previously dormant when the first daily session is previously dormant
daily_dormant_flags AS (
  SELECT
    best_id,
    DATE(session_timestamp) AS session_date,
    MAX(CAST(dormant_user_flag AS INT64)) AS dormant_day_flag
  FROM mi_repeat_paint
  GROUP BY best_id, session_date
),
join_daily_dormant_flag AS (
SELECT
  b.*,
  COALESCE(d.dormant_day_flag = 1, FALSE) AS dormant_day_flag
FROM mi_repeat_paint b
LEFT JOIN daily_dormant_flags d
  ON b.best_id = d.best_id
  AND DATE(b.session_timestamp) = d.session_date
),

-- add flags for multiple repeat orders
add_multi_order_flag AS (
SELECT
    *,
    CASE WHEN rolling_order_window > 2 THEN TRUE ELSE FALSE END AS top_customer_flag
FROM join_daily_dormant_flag
),

-- add custom cohorts
add_cohorts AS (
SELECT 
  *,
CASE
  -- Top purchaser logic
  WHEN top_customer_flag THEN
    CASE
      WHEN daily_purchase_flag THEN 10
      WHEN NOT returned_home_5d_plus_new THEN 10
      WHEN returned_home_5d_plus_new AND NOT engaged_flag THEN 9
      WHEN returned_home_5d_plus_new AND engaged_flag THEN 10
    END

  -- Repeat purchaser with MI flag
  WHEN repeat_purchaser_mi THEN
    CASE
      WHEN daily_purchase_flag THEN 7
      WHEN NOT purchaser AND engaged_flag THEN 8
      WHEN NOT purchaser AND NOT engaged_flag THEN 6
      WHEN purchaser AND NOT returned_home_5d_plus_new THEN 7
      WHEN purchaser AND returned_home_5d_plus_new AND NOT engaged_flag THEN 6
      WHEN purchaser AND returned_home_5d_plus_new AND engaged_flag THEN 8
    END

  -- New customers
  WHEN NOT purchaser THEN
    CASE
      WHEN NOT engaged_flag THEN 1
      WHEN engaged_flag THEN 2
    END

  -- First-time purchasers
  WHEN purchaser AND NOT repeat_purchaser THEN
    CASE
      WHEN daily_purchase_flag THEN 4
      WHEN NOT returned_home_5d_plus_new THEN 4
      WHEN returned_home_5d_plus_new AND NOT engaged_flag THEN 3
      WHEN returned_home_5d_plus_new AND engaged_flag THEN 5
    END

  -- Repeat purchasers not flagged by MI
  WHEN repeat_purchaser THEN
    CASE
      WHEN daily_purchase_flag THEN 7
      WHEN NOT returned_home_5d_plus_new THEN 7
      WHEN returned_home_5d_plus_new AND NOT engaged_flag THEN 6
      WHEN returned_home_5d_plus_new AND engaged_flag THEN 8
    END

  ELSE 0
END AS cohort

FROM add_multi_order_flag
),

-- find previous cohort, with calculations for the dormant user type
add_dormant_user_flag_and_previous_cohort AS (
SELECT
  *,
  CASE
      -- Top customers who returned home
    WHEN dormant_user_flag = TRUE 
         AND returned_home_5d_plus_new = TRUE 
         AND top_customer_flag IS TRUE
      THEN -4
    -- Repeat customers who did NOT return home yet
    WHEN dormant_user_flag = TRUE 
         AND returned_home_5d_plus_new = FALSE 
         AND top_customer_flag IS TRUE
      THEN 10
    -- Repeat customers who returned home
    WHEN dormant_user_flag = TRUE 
         AND returned_home_5d_plus_new = TRUE 
         AND (repeat_purchaser = TRUE OR repeat_purchaser_mi = TRUE)
      THEN -3
    -- Repeat customers who did NOT return home yet
    WHEN dormant_user_flag = TRUE 
         AND returned_home_5d_plus_new = FALSE 
         AND (repeat_purchaser = TRUE OR repeat_purchaser_mi = TRUE)
      THEN 7
    -- New customers who did NOT return home yet
    WHEN dormant_user_flag = TRUE 
         AND returned_home_5d_plus_new = FALSE 
         AND purchaser = TRUE 
         AND (repeat_purchaser = FALSE AND repeat_purchaser_mi = FALSE)
      THEN 4
    -- New customers who DID return home
    WHEN dormant_user_flag = TRUE 
         AND returned_home_5d_plus_new = TRUE 
         AND purchaser = TRUE 
         AND (repeat_purchaser = FALSE AND repeat_purchaser_mi = FALSE)
      THEN -2
    -- First time browsers
    WHEN dormant_user_flag = TRUE 
         AND purchaser = FALSE 
         AND repeat_purchaser_mi = FALSE 
         AND first_visit_events = 1
      THEN 0
    -- Other browsers
    WHEN dormant_user_flag = TRUE 
         AND purchaser = FALSE 
         AND repeat_purchaser_mi = FALSE
      THEN -1
    -- Default case: use previous cohort
    ELSE LAG(cohort) OVER (PARTITION BY best_id ORDER BY session_timestamp)
  END AS previous_cohort
FROM add_cohorts
),

-- cohort change rolling window
add_cohort_windows AS (
SELECT
  *,
  SUM(CASE WHEN cohort 
  <> previous_cohort THEN 1 ELSE 0 END) OVER (PARTITION BY best_id ORDER BY session_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cohort_change_window
FROM add_dormant_user_flag_and_previous_cohort
),

-- calculate min and max timestamp for each user and cohort change window
cohort_time_diff AS (
SELECT 
    best_id,
    cohort_change_window,
    MIN(session_timestamp) AS first_session_timestamp,
    MAX(session_timestamp) AS last_session_timestamp
FROM add_cohort_windows
GROUP BY ALL
),

-- join back to main table and calculate difference to get duration of days
add_cohort_days AS (
  SELECT 
    a.*, 
    b.first_session_timestamp,
    b.last_session_timestamp,
    TIMESTAMP_DIFF(b.last_session_timestamp, b.first_session_timestamp, DAY)+1 AS cohort_duration_days
FROM add_cohort_windows AS a
LEFT JOIN cohort_time_diff AS b
    ON a.best_id = b.best_id 
    AND a.cohort_change_window = b.cohort_change_window
),

add_last_daily_cohort AS (
SELECT    
  *  ,
  LAST_VALUE(cohort) OVER (PARTITION BY date, best_id ORDER BY session_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_daily_cohort
  FROM add_cohort_days
),

add_first_daily_cohort AS (
SELECT    
  * , 
  FIRST_VALUE(cohort) OVER (PARTITION BY date, best_id ORDER BY session_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_daily_cohort, 
  FROM add_last_daily_cohort
),

top_cohort AS (
SELECT
  date,
  best_id,
  MAX(cohort) AS top_daily_cohort,
FROM add_first_daily_cohort
GROUP BY date, best_id
),

top_cohort_prev_day AS (
  SELECT
    *,
    LAG(top_daily_cohort) OVER (PARTITION BY best_id ORDER BY date) AS prev_day_top_daily_cohort
  FROM top_cohort
),

join_top_cohort AS (
  SELECT 
  a.*,
  CASE 
    WHEN cohort = 4 THEN 4
    WHEN cohort = 7 THEN 7
  ELSE b.top_daily_cohort END AS top_daily_cohort,
  COALESCE((CASE
    WHEN dormant_day_flag IS TRUE THEN MIN(previous_cohort) OVER (PARTITION BY a.best_id, a.date)
  END), prev_day_top_daily_cohort) AS prev_top_daily_cohort
FROM add_first_daily_cohort AS a
LEFT JOIN top_cohort AS b
ON 
  a.date = b.date 
    AND a.best_id = b.best_id
LEFT JOIN top_cohort_prev_day AS c
ON 
  a.date = c.date 
    AND a.best_id = c.best_id    
),

scored_changes AS (
  SELECT
    *,
    CASE 
      WHEN previous_cohort IS NULL THEN 1
      ELSE cohort - previous_cohort
    END AS cohort_shift
  FROM join_top_cohort
),

calculate_shifts AS (SELECT
  *,
  COUNT(*) AS total_sessions,
  SUM(CASE WHEN cohort_shift > 0 THEN cohort_shift ELSE 0 END) AS positive_changes,
  SUM(CASE WHEN cohort_shift < 0 THEN cohort_shift ELSE 0 END) AS negative_changes
FROM scored_changes
GROUP BY ALL
),

pick_top_worst_channel AS (
SELECT
  *,
  FIRST_VALUE(channel) OVER user_day_window AS top_daily_channel_push, 
  LAST_VALUE(channel) OVER user_day_window AS top_daily_channel_retreat, 
FROM calculate_shifts
WINDOW user_day_window AS (PARTITION BY date, best_id ORDER BY cohort_shift, pageviews DESC)
),

-- final query
final AS (SELECT 
  * EXCEPT(bounced_session, top_daily_channel_push, top_daily_channel_retreat),
  CASE WHEN positive_changes = 0 THEN NULL ELSE top_daily_channel_push END AS top_daily_channel_push,
  CASE WHEN negative_changes = 0 THEN NULL ELSE top_daily_channel_retreat END AS top_daily_channel_retreat,
  CASE WHEN pageviews = 0 and bounced_session = 0 THEN 1 ELSE bounced_session END AS bounced_session
FROM pick_top_worst_channel
)

SELECT * FROM final